<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="AddTimerButton.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAPAAAADwCAYAAAA+VemSAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        xAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAABGlSURBVHhe7Z11
        tCzNVUeDBwhuIbi7u0twtwR3d0lCgru7E9w1wTW4uwWCuyZAILjLb7O+Xlwu5zvTPVPVc+d9e6+1/3jr
        re7qmTvdXXXq1Kk7iYiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
        iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
        iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIjI/3KX+GrxY+M3
        xl+Jvxf/Kv5l/J34s/Gr4vvFF4mPEm8KzxTfOX5+/MHI9f5Z5Pr/OP5mfFD8zPjm8a5R/i+PGV8pflR8
        YHxw/N3Id/jwyHf68/Fr4gfFl4yPGm8KTxffPt4/fn/8rfinkev/k9v+/b3xs+Nbx6eMF88LxS+L/xT/
        a6MPix8dz/VF8IN7l/jLsbq+Q/5AvGd85HhH5nniF8R/iNX31MmN/Unx6eM5ePT4tpGXS3V9h/zx+Gbx
        0eJF8RTxq+N/xuqDbfEf44fGx4h7cY/4B7G6nq3yVnnxeEfjSeIXxf+I1feyxX+JHxcfO+7Fa0TeqtX1
        bPUh8e7xInj5yNuz+iCn+NPxqeJM7hzpJlftn+K/xfvER4p3BF4s/lGsvotTpDfEcGYmdNs/OVbtnyIv
        sw+LN7pH9jrxX2P1AUbIeHNWd4ru0rfFqt1Rfnq81XmFSK+p+vwj/Iv4HHEGxF3oOVbtjvJL4o28iV82
        0tWpLnqkBD6eOI6ENyPBtaq90X5gvFV5wXjMWHerBI9mxEa4uar2RvuJ8UbxpJEvtbrYqzIWoBvxqpGu
        EMfdLT57fIP4WXFN9/tb4sju6PvEqp2r/nN8QCSowQ/1aeITRHoEREzfLRKFPDTu//f4MvFW4/EikeTq
        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
        qjKHvWZM1Elklrc66ZR7cFNu4AXKE414GxP0263k6m0wvcQ4m7dmdU1rJa7DGJ8luBcHT0v+iCz1emis
        PmAlyRt8eXvfuNdhI2je/AQt1narWIpGMIYJehJR9oSsJ4IqnS8V94ReE0FCds7Y8lbj4c9qp3PvGUWP
        khkI1pwzfq2u9brc9KSY0h2/S7wl4A/JDcmbmbcS3SHC7UgkmhVALLkakXo3A6abSOl7q8iNsFz7R0aq
        ITL9xTTZXm/bS4XoK3slsziBSP7yPVJkgXJGVN2YFaU/FYYG7OrAw5nfADkEXDs1yZliYuM8pjf3fnCL
        iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
        iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
        iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
        iNxhudOd/hsBKt5QLhgSdgAAAABJRU5ErkJggg==
</value>
  </data>
</root>